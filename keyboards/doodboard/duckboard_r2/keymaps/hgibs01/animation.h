//**************************************************
//* PLACE THESE VARIABLE DEFS AT BEGINNING OF FILE *
//**************************************************

#define ANIM_SIZE 128
#define IDLE_FRAMES 13
#define ANI_BYTE_SIZE 8
#define COPY_BIT(dest, id, src, is) dest = (( dest & ~(1<<id) ) | ((src & (1<<is))>>is) << id );

//*********************************************
//* Compression ratio: 1.71 to 1             *
//* Estimated PROGMEM Usage: 897 bytes        *
//*********************************************

static const char PROGMEM frame[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x20, 0x10, 0x08, 0x08, 0x08, 0x04, 0x84, 
	0x7C, 0x7C, 0x84, 0x04, 0x08, 0x08, 0x08, 0x10, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xE0, 0x1C, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 
	0x1C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x40, 0x38, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x04, 
	0x08, 0x10, 0x10, 0x10, 0x20, 0x21, 0x3E, 0x3E, 0x21, 0x20, 0x10, 0x10, 0x10, 0x08, 0x04, 
	0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static const uint8_t cumsum_inds[] = {
	0b01100001, 0b10000010, 0b00110100, 0b11000010, 0b01001001, 0b00100100, 0b01100001, 0b11001011, 0b00101100, 
};

static const  uint8_t change_inds[] = {
	0b00011010, 0b00111000, 0b01111001, 0b00000010, 0b00100100, 0b10010110, 0b00101101, 0b01011100, 0b11000101, 0b10010011, 0b00111001, 0b10010011, 0b01100111, 0b01010001, 0b10100101, 
	0b01001111, 0b01101110, 0b11101101, 0b11111100, 0b00111000, 0b11110010, 0b00010110, 0b00110000, 0b01101000, 0b11100010, 0b00100100, 0b10001001, 0b10010100, 0b01010100, 0b10101101, 
	0b01100010, 0b11010110, 0b01001100, 0b11011010, 0b00110101, 0b10010101, 0b00101110, 0b01100100, 0b11011010, 0b01010100, 0b11101010, 0b01010101, 0b11010111, 0b10110011, 0b01101110, 
	0b11101110, 0b00111100, 0b10111001, 0b11110100, 0b00001110, 0b00100000, 0b01001000, 0b10100001, 0b01100011, 0b00000110, 0b10001110, 0b00100010, 0b01001000, 0b10011001, 0b01000010, 
	0b10100101, 0b10001011, 0b10011000, 0b01001000, 0b10010101, 0b00110010, 0b10100101, 0b01101101, 0b00011010, 0b10111001, 0b01110100, 0b11101110, 0b00100100, 0b01011000, 0b11010010, 
	0b10100101, 0b11010100, 0b10101011, 0b01100110, 0b11010101, 0b10111100, 0b11111010, 0b00110100, 0b11101010, 0b11010111, 0b10110011, 0b01101110, 0b11101110, 0b00111100, 0b10111001, 
	0b11110100, 0b11101011, 0b11011011, 0b10111111, 0b10000000, 0b11100010, 0b00000100, 0b10001010, 0b00010110, 0b00110000, 0b01101001, 0b00100010, 0b01100101, 0b00001010, 0b10010110, 
	0b00101110, 0b01100001, 0b00100010, 0b01010100, 0b11001010, 0b00010100, 0b10110110, 0b01101110, 0b11100101, 0b11010011, 0b10111000, 0b10010001, 0b01100011, 0b01001000, 0b10010011, 
	0b01011010, 0b10111101, 0b10011011, 0b01010110, 0b11110011, 0b11101000, 0b11010011, 0b10101011, 0b01011110, 0b11001101, 0b10111100, 0b10111001, 0b11110100, 0b11101011, 0b11011011, 
	0b10111111, 0b10000001, 0b00000010, 0b01000101, 0b00001011, 0b00011000, 0b01001100, 0b10100001, 0b01010010, 0b11000101, 0b11010011, 0b00100111, 0b01010000, 0b10100101, 0b10110011, 
	0b01110111, 0b00001110, 0b01100011, 0b01000111, 0b10010001, 0b00100110, 0b10110101, 0b01111011, 0b00010110, 0b01110100, 0b01101001, 0b11010101, 0b10101111, 0b01100111, 0b00111110, 
	0b10011101, 0b01111011, 0b01110111, 0b00010000, 0b00100100, 0b01010000, 0b10110001, 0b10000100, 0b11001010, 0b00010101, 0b00101100, 0b01011101, 0b00110010, 0b01110101, 0b00001010, 
	0b01011011, 0b00110111, 0b01110000, 0b11100110, 0b00110100, 0b01111001, 0b00010010, 0b01101011, 0b01010111, 0b10110001, 0b01100111, 0b01000110, 0b10011101, 0b01011010, 0b11110110, 
	0b01110011, 0b11101001, 0b11010111, 0b10110111, 0b01110001, 0b01000010, 0b11000110, 0b00001101, 0b00011100, 0b01000100, 0b10010001, 0b00110010, 0b10000101, 0b01010100, 0b00101001, 
	0b01010100, 0b10101101, 0b10100011, 0b01010110, 0b11001101, 0b11100100, 0b01001001, 0b10010101, 0b00101110, 0b10100101, 0b01011010, 0b11010101, 0b11110101, 0b01101011, 0b11011001, 
	0b10110111, 0b01110111, 0b00011110, 0b01011100, 0b11111010, 0b01110101, 0b00010110, 0b00110000, 0b01101000, 0b11100010, 0b00100100, 0b10001001, 0b10010100, 0b01010100, 0b10101101, 
	0b10100011, 0b01011001, 0b01010010, 0b11101010, 0b01010101, 0b11010111, 0b10110011, 0b01101110, 0b11101110, 0b00111100, 0b10111001, 0b11110100, 0b00001110, 0b00100000, 0b01001000, 
	0b10100010, 0b10100101, 0b10001011, 0b10011000, 0b01001000, 0b10010101, 0b00110011, 0b10010111, 0b01001110, 0b11100010, 0b01000101, 0b10001101, 0b01100110, 0b11010101, 0b10111100, 
	0b11111010, 0b00110100, 0b11101010, 0b11101011, 0b11011011, 0b10111111, 0b10000000, 0b11100010, 0b00000100, 0b10001010, 0b00010110, 0b00110100, 0b10010001, 0b01000010, 0b10100101, 
	0b10001011, 0b10011000, 0b01001000, 0b10010101, 0b00110010, 0b01110101, 0b00001101, 0b11011100, 0b00111001, 0b01110100, 0b11101110, 0b00100100, 0b01011000, 0b11010001, 0b11100100, 
	0b01010111, 0b10110001, 0b01100110, 0b11010101, 0b10111100, 0b11111010, 0b00110100, 0b11101010, 0b11010111, 0b10110111, 0b10010111, 0b01001110, 0b10111101, 0b10111011, 0b11111000, 
	0b00010000, 0b00100100, 0b01010000, 0b10110001, 0b10100011, 0b10000111, 0b10010000, 0b00100010, 0b01001000, 0b10100001, 0b01010010, 0b11000101, 0b11010011, 0b00100111, 0b01010000, 
	0b10111001, 0b10001011, 0b01110111, 0b00001110, 0b01100011, 0b01000111, 0b10010001, 0b00111010, 0b10001101, 0b01111011, 0b00010110, 0b01110100, 0b01101001, 0b11010101, 0b10101111, 
	0b01101110, 0b11101101, 0b11111100, 0b00111000, 0b11110010, 0b11101001, 0b11010111, 0b10110111, 0b01110000, 
};

static const char PROGMEM change_vals[] = {
	0xE4, 0x1C, 0x04, 0x04, 0x1C, 0xE4, 0xFC, 0x03, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 
	0x00, 0xC0, 0x3F, 0x27, 0x38, 0x20, 0x20, 0x38, 0x27, 0x88, 0x68, 0x14, 0x0C, 0x0C, 0x14, 
	0x68, 0x88, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x1F, 0xE0, 0x00, 0x00, 0x00, 
	0x00, 0xE0, 0x1F, 0x11, 0x16, 0x28, 0x30, 0x30, 0x28, 0x16, 0x11, 0xA0, 0x60, 0x30, 0x18, 
	0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x18, 0x30, 0x60, 0xA0, 0xE2, 0x1D, 0x03, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x1D, 0xE2, 0x47, 0xB8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 
	0xB8, 0x47, 0x05, 0x06, 0x0C, 0x18, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x18, 
	0x0C, 0x06, 0x05, 0x20, 0x20, 0x10, 0xC8, 0x28, 0x18, 0x0C, 0x0C, 0x18, 0x28, 0xC8, 0x10, 
	0x20, 0x20, 0x02, 0x01, 0x00, 0xF0, 0x0F, 0x0F, 0xF0, 0x00, 0x01, 0x02, 0x40, 0x80, 0x00, 
	0x0F, 0xF0, 0xF0, 0x0F, 0x00, 0x80, 0x40, 0x04, 0x04, 0x08, 0x13, 0x14, 0x18, 0x30, 0x30, 
	0x18, 0x14, 0x13, 0x08, 0x04, 0x04, 0xA0, 0x50, 0x28, 0x18, 0x08, 0x08, 0x18, 0x28, 0x50, 
	0xA0, 0xF0, 0x0E, 0x01, 0x00, 0x00, 0x01, 0x0E, 0xF0, 0x0F, 0x70, 0x80, 0x00, 0x00, 0x80, 
	0x70, 0x0F, 0x05, 0x0A, 0x14, 0x18, 0x10, 0x10, 0x18, 0x14, 0x0A, 0x05, 0x20, 0x10, 0xC8, 
	0x28, 0x18, 0x18, 0x28, 0xC8, 0x10, 0x20, 0x00, 0x00, 0xF0, 0x0F, 0x0F, 0xF0, 0x00, 0x00, 
	0x00, 0x00, 0x0F, 0xF0, 0xF0, 0x0F, 0x00, 0x00, 0x04, 0x08, 0x13, 0x14, 0x18, 0x18, 0x14, 
	0x13, 0x08, 0x04, 0x08, 0x88, 0x68, 0x14, 0x0C, 0x0C, 0x14, 0x68, 0x88, 0x08, 0x00, 0x00, 
	0xF8, 0x07, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0xE0, 0x1F, 0x00, 0x00, 0x10, 
	0x11, 0x16, 0x28, 0x30, 0x30, 0x28, 0x16, 0x11, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 
	0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x20, 0x20, 
	0x20, 0x10, 0x10, 0xA0, 0x60, 0x30, 0x18, 0x18, 0x30, 0x60, 0xA0, 0xE2, 0x1D, 0x03, 0x03, 
	0x1D, 0xE2, 0x47, 0xB8, 0xC0, 0xC0, 0xB8, 0x47, 0x05, 0x06, 0x0C, 0x18, 0x18, 0x0C, 0x06, 
	0x05, 0x20, 0xA0, 0x50, 0x28, 0x18, 0x0C, 0x0C, 0x18, 0x28, 0x50, 0xA0, 0x20, 0x02, 0x01, 
	0xF0, 0x0E, 0x01, 0x01, 0x0E, 0xF0, 0x01, 0x02, 0x40, 0x80, 0x0F, 0x70, 0x80, 0x80, 0x70, 
	0x0F, 0x80, 0x40, 0x04, 0x05, 0x0A, 0x14, 0x18, 0x30, 0x30, 0x18, 0x14, 0x0A, 0x05, 0x04, 
	0x20, 0x10, 0x08, 0x08, 0x04, 0x84, 0x7C, 0x7C, 0x84, 0x04, 0x08, 0x08, 0x10, 0x20, 0x00, 
	0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
	0x04, 0x08, 0x10, 0x10, 0x20, 0x21, 0x3E, 0x3E, 0x21, 0x20, 0x10, 0x10, 0x08, 0x04, 
};

static uint16_t get_num(const uint8_t* arr, int bitsize, int index){
	int arr_index = ((bitsize*index)/ANI_BYTE_SIZE);
	int byte_index = 7-(((bitsize*index) % ANI_BYTE_SIZE));
	uint16_t res = 0;
	for(int i = bitsize-1;i >= 0; i--){
		COPY_BIT(res, i, arr[arr_index], byte_index);
		byte_index--;
		if(byte_index < 0){
			byte_index = 7;
			arr_index++;
		}
	}
	return res;
}

uint16_t index_start = 0;
uint16_t index_end = 0;

static void change_frame_bytewise(uint8_t frame_number){
	index_start = frame_number == 0 ? 0 : index_end;
	index_end = index_start + get_num(cumsum_inds, 6, frame_number);
	if (index_start != index_end){
		for (uint16_t i=index_start; i < index_end; i++){
			oled_write_raw_byte(pgm_read_byte(change_vals + i), get_num(change_inds, 7, i));
		}
	}
}
